#!/usr/bin/env bash

DEFAULTNAME=orjail
NAME=$DEFAULTNAME
IPHOSTDEFAULT=10.200.1.1
IPHOST=$IPHOSTDEFAULT
IPNETNSDEFAULT=10.200.1.2
IPNETNS=$IPNETNSDEFAULT
NETMASKDEFAULT=24
NETMASK=$NETMASKDEFAULT

# Functions
# ~~~~~~~~~

print() {
  echo "$1"
}

# Cleanup function
cleanup() {
  # Remove in-$NAME network interface
  ip link del in-$NAME

  # Delete network namespace $NAME
  ip netns delete $NAME

  # Cleaning up iptables rules
  iptables -t nat -D  PREROUTING -i in-$NAME -p udp -d $IPHOST --dport 53 -j DNAT --to-destination $IPHOST:5354
  iptables -t nat -D  PREROUTING -i in-$NAME -p tcp --syn -j DNAT --to-destination $IPHOST:9040
  iptables -D OUTPUT -o in-$NAME -m state --state ESTABLISHED,RELATED -j ACCEPT
  iptables -D INPUT -i in-$NAME -j DROP
  iptables -D INPUT -i in-$NAME -p udp --destination $IPHOST --dport 5354 -j ACCEPT
  iptables -D INPUT -i in-$NAME -p tcp --destination $IPHOST --dport 9040 -j ACCEPT

  # Remove temporary resolve file
  rm "$RESOLVEFILE"
}

# Arguments check
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -n|--name)
      NAME="$2"
      shift
      ;;
    -r|--routing)
      IPHOST="$2"
      shift
      IPNETNS="$2"
      shift
      NETMASK="$2"
      shift
      ;;
    *)
      break
      ;;
  esac
  shift
done

# Check if network namespace already exists
ip netns list | grep -e \\b$NAME\\b &> /dev/null
if [ $? -ne 0 ]; then
  # Creating a $NAME namespace
  ip netns add $NAME || exit 1

  # Create veth link
  ip link add in-$NAME type veth peer name out-$NAME || exit 1

  # Add out to NS
  ip link set out-$NAME netns $NAME || exit 1

  # Setup IP address of host interface
  ip addr add $IPHOST/$NETMASK dev in-$NAME || exit 1
  ip link set in-$NAME up || exit 1

  # Setup IP address of peer
  ip netns exec $NAME ip addr add $IPNETNS/$NETMASK dev out-$NAME || exit 1
  ip netns exec $NAME ip link set out-$NAME up || exit 1

  # Default route
  ip netns exec $NAME ip route add default via $IPHOST || exit 1

  # Resolve with tor
  iptables -t nat -A PREROUTING -i in-$NAME -p udp -d $IPHOST --dport 53 -j DNAT --to-destination $IPHOST:5354 || exit 1

  # Traffic through tor
  iptables -t nat -A PREROUTING -i in-$NAME -p tcp --syn -j DNAT --to-destination $IPHOST:9040 || exit 1
  iptables -A OUTPUT -m state -o in-$NAME --state ESTABLISHED,RELATED -j ACCEPT || exit 1

  # Reject all traffic coming from orjail
  iptables -I INPUT -i in-$NAME -p udp --destination $IPHOST --dport 5354 -j ACCEPT &&
  iptables -I INPUT -i in-$NAME -p tcp --destination $IPHOST --dport 9040 -j ACCEPT &&
  iptables -A INPUT -i in-$NAME -j DROP || exit 1

  # Execute tor
  TORCONFIGFILE=$(mktemp /tmp/torXXXXXX)
  chown $USERNAME $TORCONFIGFILE || exit 1

  # ... (rest of the tor configuration)

  $TORBIN --quiet -f $TORCONFIGFILE &> /dev/null &
else
  echo "$NAME network namespace already exists!"
fi

RESOLVEFILE=$(mktemp /tmp/resolveXXXXXX)
echo "nameserver $IPHOST" > $RESOLVEFILE || exit 1
chmod a+r $RESOLVEFILE || exit 1

# Execute the command inside the namespace
ip netns exec $NAME \
  unshare --ipc --fork --pid --mount --mount-proc \
  "$0" --inside "$USERNAME" "$RESOLVEFILE" "$@" || exit 1

# Clean up
cleanup
